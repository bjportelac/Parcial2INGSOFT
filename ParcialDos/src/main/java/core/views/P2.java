/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core.views;

import core.DAO.HistoricoDAO;
import core.DAO.SensorDAO;
import core.DAO.TipoDAO;
import core.models.Historico;
import core.models.Sensor;
import core.models.Tipo;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author benga
 */
public class P2 extends javax.swing.JFrame {
DefaultTableModel modelTBL = new DefaultTableModel();
ArrayList<Integer> datasent = new ArrayList<Integer>();
    /**
     * Creates new form P2
     */
    public P2() {
        initComponents();
        
        averageCHK.setSelected(false);
        
        ArrayList <Sensor> senslist = SensorDAO.findAll();
        DefaultComboBoxModel modelCBX = new DefaultComboBoxModel();
        for(Sensor s:senslist){
            modelCBX.addElement(s.getId_sensor());
        }
        idCBX.setModel(modelCBX);
        
        ArrayList <Object> columns = new ArrayList<Object>();
        columns.add("ID");
        columns.add("ID SENSOR");
        columns.add("LECTURA");
        columns.add("FECHA");
        columns.add("PROCESAMIENTO");
        for(Object column :columns){
            modelTBL.addColumn(column);
        }
        HistTBL.setModel(modelTBL);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sendBTN = new javax.swing.JButton();
        idCBX = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        HistTBL = new javax.swing.JTable();
        HistoryBTN = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        processingBTN = new javax.swing.JButton();
        averageCHK = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sendBTN.setText("Enviar Dato");
        sendBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBTNActionPerformed(evt);
            }
        });

        idCBX.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("SENSOR INFRAROJO:");

        jLabel2.setText("Seleccione la ID del sensor:");

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        HistTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(HistTBL);

        HistoryBTN.setText("Historico Por ID");
        HistoryBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryBTNActionPerformed(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        processingBTN.setText("Procesamiento de Datos");
        processingBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processingBTNActionPerformed(evt);
            }
        });

        averageCHK.setText("Promedio");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(idCBX, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HistoryBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processingBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(averageCHK)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendBTN)
                        .addComponent(idCBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(HistoryBTN)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(processingBTN)
                        .addComponent(averageCHK)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBTNActionPerformed
        
        if(averageCHK.isSelected()==true){
            //stablish actual time
            Object sensorList = idCBX.getSelectedItem();
            int sensorID = (int) sensorList;
            
            Date date= new Date();
            long time = date.getTime();
            Timestamp actual = new Timestamp(time);
            
            //substract one hour
            long average = (1000 * 60 * 60 * 1);
            Timestamp less = new Timestamp(actual.getTime()-average);
            
            //
            long sendrate = (1000*60*1);
            Timestamp reg = less;
            
                       
            int r2 = (int) (Math.random() * 2);
            String procesamiento = "";
            if(r2 == 0){
                procesamiento = "NORMAL";
            }else{
                procesamiento = "ANORMAL";
            }
            
            int r3 = 0;
            int t = 0;
            
            Historico h = new Historico(); 
            
            while(reg.before(actual) && datasent.size()<60){
                r3 = (int) (Math.random()*2);
                t = 0;
                if(r3!=0){
                    t = 5;
                }
                reg = new Timestamp(reg.getTime()+sendrate);
                h.setSensor_id(sensorID);
                h.setFecha(reg);                
                h.setLectura(t);
                datasent.add(t);
                h.setProcesamiento(procesamiento);
                HistoricoDAO.create(h);
            }
            
            
            
        }else{
            Object sensorList = idCBX.getSelectedItem();
            int sensorID = (int) sensorList;
        
            Date date= new Date();
            long time = date.getTime();
            Timestamp ts = new Timestamp(time);
        
            int r2 = (int) (Math.random() * 2);
            String procesamiento = "";
            if(r2 == 0){
                procesamiento = "NORMAL";
            }else{
                procesamiento = "ANORMAL";
            }
        
            int r3 = (int) (Math.random()*2);
            int t = 0;
            if(r3!=0){
                t = 5;
            }
        
            Historico h = new Historico();
            h.setSensor_id(sensorID);
            h.setFecha(ts);
            h.setLectura(t);
            h.setProcesamiento(procesamiento);

            if(HistoricoDAO.create(h)>0){
                System.out.println("Exito");
            }else{
                System.out.println("Error");
            }
        }
        
    }//GEN-LAST:event_sendBTNActionPerformed

    private void HistoryBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryBTNActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelf = new DefaultTableModel();
        ArrayList <Object> columns = new ArrayList<Object>();
        columns.add("ID");
        columns.add("ID SENSOR");
        columns.add("LECTURA");
        columns.add("FECHA");
        columns.add("PROCESAMIENTO");
        for(Object column :columns){
            modelf.addColumn(column);
        }
        
        
        Object sensorList = idCBX.getSelectedItem();
        int sensorID = (int) sensorList;
        
        ArrayList<Historico> sensHistory = HistoricoDAO.findAllDate(sensorID);
        for(Historico i : sensHistory){
            Object[] data = new Object[]{i.getId(),i.getSensor_id(),i.getLectura(),i.getFecha(),i.getProcesamiento()};
            modelf.addRow(data);
        }
        HistTBL.setModel(modelf);
        
    }//GEN-LAST:event_HistoryBTNActionPerformed

    private void processingBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processingBTNActionPerformed
        // TODO add your handling code here:
        if(averageCHK.isSelected()==true){
            int resultdata = 0;
            for(int i = 0;i<datasent.size();i++){
                resultdata += datasent.get(i);
            }
            
            int avg = resultdata / datasent.size();
            
            String alert = "";
            if(avg<=0){
                alert = "Alerta 1: el valor "+String.valueOf(avg)+" esta debajo del minimo";
            }else if(avg>0 && avg <5){
                alert = "Alerta 2: el valor "+String.valueOf(avg)+" esta entre el minimo y el maximo";
            }else if(avg>=5){
                alert = "Alerta 2: el valor "+String.valueOf(avg)+" esta bobre el maximo";
            }
            
            JOptionPane.showMessageDialog(this,alert);
            
        }else{
            Object sensorList = idCBX.getSelectedItem();
            int sensorID = (int) sensorList;
            Historico dummy = HistoricoDAO.findOne(sensorID);
            String result = "";
            
            if(dummy.getLectura()==0){
                result = "Alerta 1: Valor de 0 en el minimo permitido";
            }else if(dummy.getLectura()==5){
                result = "Alerta 3: Valor de 5 En el maximo Permitido";
            }
            JOptionPane.showMessageDialog(this,result);
        }
        
        
        
        
    }//GEN-LAST:event_processingBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new P2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable HistTBL;
    private javax.swing.JButton HistoryBTN;
    private javax.swing.JCheckBox averageCHK;
    private javax.swing.JComboBox<String> idCBX;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JButton processingBTN;
    private javax.swing.JButton sendBTN;
    // End of variables declaration//GEN-END:variables
}
